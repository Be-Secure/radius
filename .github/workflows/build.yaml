# ------------------------------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------------------------------

name: Build and Test
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - v*
  pull_request:
    branches:
      - main
      - release/*

jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: '^1.16.0'
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Make
        run: make
      - name: Run make test (unit tests)
        if: matrix.target_arch != 'arm'
        run: make test
      - name: Upload CLI binary
        uses: actions/upload-artifact@master
        with:
          name: rad_cli_${{ matrix.target_os}}_${{ matrix.target_arch}}
          path: ./dist/${{ matrix.target_os}}_${{ matrix.target_arch}}/release/
          if-no-files-found: error

  # Logic here:
  # - always do a docker build for validation
  # - tag the image as latest and with a version if the trigger was a tag
  # - tag the image with the PR version if the trigger was a PR
  # - push the image for pushes to master, or to a tag
  images:
    name: Container image build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: radius.azurecr.io
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: radiusteam #login-server is https://index.docker.io/v1/ by default
          username: '${{ secrets.RADIUSTEAM_DOCKERHUB_USERNAME }}'
          password: '${{ secrets.RADIUSTEAM_DOCKERHUB_PASSWORD }}'
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        env:
          DOCKER_TAG_VERSION: latest
        with:
          context: ./deploy/rp/Dockerfile # Location of Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: | # Docker image name in each registry
            radius.azurecr.io/radius-rp:${{ env.DOCKER_TAG_VERSION }}
            radiusteam/radius-rp:${{ env.DOCKER_TAG_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push (PR)
        id: docker_build_pr
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/pull/') # build & push image on pr
        env:
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }}
        with:
          context: ./deploy/rp/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            radius.azurecr.io/radius-rp:${{ env.DOCKER_TAG_VERSION }}
            radiusteam/radius-rp:${{ env.DOCKER_TAG_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push (release)
        id: docker_build_release
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/tags/v') # build & push image on tag
        env:
          DOCKER_TAG_VERSION: ${{ env.REL_VERSION }}
        with:
          context: ./deploy/rp/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: |
            radius.azurecr.io/radius-rp:${{ env.DOCKER_TAG_VERSION }}
            radiusteam/radius-rp:${{ env.DOCKER_TAG_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy_tests: 
    name: Run deployment tests
    needs: [ 'build', 'images' ]
    runs-on: ubuntu-latest
    env:
      GOVER: '^1.16.0'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up Go ${{ env.GOVER }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOVER }}
    - name: Parse release version and set REL_VERSION
      run: python ./.github/scripts/get_release_version.py
    - name: Download release artifacts
      uses: actions/download-artifact@v2
      with:
        name: rad_cli_linux_amd64
        path: dist
    - name: Print assets (for santity)
      run: |
        echo "Asserts are in: $(cd "$(dirname ".")" && pwd)/$(basename ".")"
        ls -R
      working-directory: dist
    - name: Make rad executable
      run: chmod +x rad
      working-directory: dist
    - name: az CLI login
      run: |
        az login --service-principal \
          --username ${{ secrets.INTEGRATION_TEST_SP_APP_ID }} \
          --password ${{ secrets.INTEGRATION_TEST_SP_PASSWORD }} \
          --tenant ${{ secrets.INTEGRATION_TEST_TENANT_ID }}
    - name: Run deploy tests
      run: |
        export PATH=$GITHUB_WORKSPACE/dist:$PATH
        export RP_IMAGE=radiusteam/radius-rp:${{ env.REL_VERSION }}
        export RP_DEPLOY=true
        export AZURE_TENANT_ID=${{ secrets.INTEGRATION_TEST_TENANT_ID }}
        export AZURE_CLIENT_ID=${{ secrets.INTEGRATION_TEST_SP_APP_ID }}
        export AZURE_CLIENT_SECRET=${{ secrets.INTEGRATION_TEST_SP_PASSWORD }}
        export INTEGRATION_TEST_SUBSCRIPTION_ID="66d1209e-1382-45d3-99bb-650e6bf63fc0"
        cd $GITHUB_WORKSPACE
        echo "PATH is $PATH"
        which rad || { echo "cannot find rad"; exit 1; }
        make deploy-tests

  publish:
    name: Publish rad CLI binaries
    needs: [ 'build', 'deploy_tests' ]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # upload on push to main or tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_darwin_amd64
          path: rad_cli_darwin_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_linux_amd64
          path: rad_cli_linux_amd64
      - name: Download release artifacts
        uses: actions/download-artifact@v2
        with:
          name: rad_cli_windows_amd64
          path: rad_cli_windows_amd64
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_darwin_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/macos-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_linux_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/linux-x64/ --pattern rad'
      - uses: bacongobbler/azure-blob-storage-upload@v1.1.1
        with:
          source_dir: rad_cli_windows_amd64
          container_name: 'tools'
          connection_string: ${{ secrets.ASSETS_STORAGE_CONNECTION_STRING }}
          sync: true
          extra_args: '--destination-path rad/${{ env.REL_VERSION }}/windows-x64/ --pattern rad.exe'

  codespacesbuild:
    name: Build & publish Codespaces docker image
    # needs: [ 'build' ] ### may change to depend on build & deploy tests in the future
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
    
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
    
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: radiusteam
          username: ${{ secrets.RADIUSTEAM_DOCKERHUB_USERNAME }}
          password: ${{ secrets.RADIUSTEAM_DOCKERHUB_PASSWORD }}

      - name: Build and push
        id: docker_build
        if: (github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v') # push image on push to main or tag 
        uses: docker/build-push-action@v2
        with:
          context: ./.devcontainer/tutorials-codespace/
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  radiusteam/radcodespace:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}